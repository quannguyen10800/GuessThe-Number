{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport Colors from \"./constants/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    userNumber = _useState2[0],\n    setUserNumber = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    gameIsOver = _useState4[0],\n    setGameIsOver = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    guessRounds = _useState6[0],\n    setGuessRounds = _useState6[1];\n  var _useFonts = useFonts({\n      'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n      'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n  function pickedNumberHandler(pickedNumber) {\n    setUserNumber(pickedNumber);\n    setGameIsOver(false);\n  }\n  function gameOverHandler(numberOfRounds) {\n    setGameIsOver(true);\n    setGuessRounds(numberOfRounds);\n  }\n  function startNewGameHandler() {\n    setUserNumber(null);\n    setGuessRounds(0);\n  }\n  var screen = _jsx(StartGameScreen, {\n    onPickNumber: pickedNumberHandler\n  });\n  if (userNumber) {\n    screen = _jsx(GameScreen, {\n      userNumber: userNumber,\n      onGameOver: gameOverHandler\n    });\n  }\n  if (gameIsOver && userNumber) {\n    screen = _jsx(GameOverScreen, {\n      userNumber: userNumber,\n      roundsNumber: guessRounds,\n      onStartNewGame: startNewGameHandler\n    });\n  }\n  return _jsx(LinearGradient, {\n    colors: [Colors.primary700, Colors.accent500],\n    style: styles.rootScreen,\n    children: _jsx(ImageBackground, {\n      source: require(\"./assets/images/background.png\"),\n      resizeMode: \"cover\",\n      style: styles.rootScreen,\n      imageStyle: styles.backgroundImage,\n      children: _jsx(SafeAreaView, {\n        style: styles.rootScreen,\n        children: screen\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  rootScreen: {\n    flex: 1\n  },\n  backgroundImage: {\n    opacity: 0.15\n  }\n});","map":{"version":3,"names":["useState","StyleSheet","ImageBackground","SafeAreaView","LinearGradient","useFonts","AppLoading","StartGameScreen","GameScreen","GameOverScreen","Colors","jsx","_jsx","App","_useState","_useState2","_slicedToArray","userNumber","setUserNumber","_useState3","_useState4","gameIsOver","setGameIsOver","_useState5","_useState6","guessRounds","setGuessRounds","_useFonts","require","_useFonts2","fontsLoaded","pickedNumberHandler","pickedNumber","gameOverHandler","numberOfRounds","startNewGameHandler","screen","onPickNumber","onGameOver","roundsNumber","onStartNewGame","colors","primary700","accent500","style","styles","rootScreen","children","source","resizeMode","imageStyle","backgroundImage","create","flex","opacity"],"sources":["/Users/quannguyen/Downloads/starting-project/App.js"],"sourcesContent":["import { useState } from 'react';\nimport { StyleSheet, ImageBackground, SafeAreaView } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\n\nimport StartGameScreen from './screens/StartGameScreen';\nimport GameScreen from './screens/GameScreen';\nimport GameOverScreen from './screens/GameOverScreen';\nimport Colors from './constants/colors';\n\nexport default function App() {\n  const [userNumber, setUserNumber] = useState();\n  const [gameIsOver, setGameIsOver] = useState(true);\n  const [guessRounds, setGuessRounds] = useState(0);\n\n  const [fontsLoaded] = useFonts({\n    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf'),\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  function pickedNumberHandler(pickedNumber) {\n    setUserNumber(pickedNumber);\n    setGameIsOver(false);\n  }\n\n  function gameOverHandler(numberOfRounds) {\n    setGameIsOver(true);\n    setGuessRounds(numberOfRounds);\n  }\n\n  function startNewGameHandler() {\n    setUserNumber(null);\n    setGuessRounds(0);\n  }\n\n  let screen = <StartGameScreen onPickNumber={pickedNumberHandler} />;\n\n  if (userNumber) {\n    screen = (\n      <GameScreen userNumber={userNumber} onGameOver={gameOverHandler} />\n    );\n  }\n\n  if (gameIsOver && userNumber) {\n    screen = (\n      <GameOverScreen\n        userNumber={userNumber}\n        roundsNumber={guessRounds}\n        onStartNewGame={startNewGameHandler}\n      />\n    );\n  }\n\n  return (\n    <LinearGradient\n      colors={[Colors.primary700, Colors.accent500]}\n      style={styles.rootScreen}\n    >\n      <ImageBackground\n        source={require('./assets/images/background.png')}\n        resizeMode=\"cover\"\n        style={styles.rootScreen}\n        imageStyle={styles.backgroundImage}\n      >\n        <SafeAreaView style={styles.rootScreen}>{screen}</SafeAreaView>\n      </ImageBackground>\n    </LinearGradient>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rootScreen: {\n    flex: 1,\n  },\n  backgroundImage: {\n    opacity: 0.15,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}